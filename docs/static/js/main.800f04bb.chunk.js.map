{"version":3,"sources":["reportWebVitals.js","components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","pages/GifExpertApp.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","categories","useState","formValue","setFormValue","onSubmit","e","preventDefault","trim","length","type","name","placeholder","autoComplete","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","result","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","useFetchGifs","GifExpertApp","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6BC6BCQ,EAhCK,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,cAAcC,EAAgB,EAAhBA,WAEhC,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OACQ,sBAAMC,SAVK,SAACC,GAChBA,EAAEC,iBAECJ,EAAUK,OAAOC,OAAO,IACvBT,EAAc,CAACG,GAAF,mBAAeF,KAC5BG,EAAa,MAKb,SACI,uBACIM,KAAK,OACLC,KAAK,WACLC,YAAY,iBACZC,aAAa,MACbC,SAAU,SAACR,GAAD,OAAKF,EAAaE,EAAES,OAAOC,QACrCA,MAAOb,O,+BCxBdc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEL,mCACRC,EAHa,uDAEL,mCAFK,cAGuDC,UAAUH,GAHjE,sBAKEI,MAAMF,GALR,cAKbG,EALa,gBAMEA,EAAOC,OANT,uBAMZC,EANY,EAMZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAMC,GACTC,MAAMF,EAAME,MACZV,IAAIQ,EAAMG,OAAOC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCYLO,EAXK,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAExB,OACI,sBAAKc,UAAU,mDAAf,UACI,6BAAKJ,IACL,qBAAKK,IAAKf,EAAKgB,IAAKN,QC0BjBO,EA3BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGd,ECNwB,SAACA,GAEzB,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAEOxB,EAAQC,GAChBzB,MAAM,SAAAgC,GACPe,EAAS,CACLf,OACAa,SAAQ,SAKjB,CAACpB,IAEGqB,EDdgBG,CAAaxB,GAA7BoB,EAAP,EAAOA,QAAQb,EAAf,EAAeA,KASf,OACI,gCACI,6BAAKP,IACJoB,EACK,wCACA,oBAAIJ,UAAU,OAAd,SACGT,EAAKE,KAAI,SAAAC,GAAK,OACX,cAAC,EAAD,eAAgCA,GAAdA,EAAMC,aEAjCc,EArBM,WAEjB,MAAiCzC,mBAAS,CAAC,cAA3C,mBAAOD,EAAP,KAAkBD,EAAlB,KAGA,OACI,eAAC,WAAD,WACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,EAAeC,WAAYA,IACvD,uBAEA,6BACKA,EAAW0B,KAAI,SAACT,EAAS0B,GAAV,OACZ,cAAC,EAAD,CAAwB1B,SAAUA,GAApBA,YCXlC2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.800f04bb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react/cjs/react.development';\r\n\r\nconst AddCategory = ({setCategories,categories}) => {\r\n\r\n    const [formValue,setFormValue]=useState('');\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if(formValue.trim().length>2){\r\n            setCategories([formValue,...categories]);\r\n            setFormValue('');\r\n        }\r\n\r\n    }\r\n    return ( \r\n            <form onSubmit={handleSubmit} >\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"category\" \r\n                    placeholder='Add a category'\r\n                    autoComplete=\"off\"\r\n                    onChange={(e)=>setFormValue(e.target.value)}\r\n                    value={formValue}\r\n                />\r\n            </form>\r\n     );\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    categories:PropTypes.array.isRequired,\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n \r\nexport default AddCategory;","\nexport const getGifs = async (category)=>{\n\n    const API_KEY='TOomV2WCL97EOi7Fw6Jcx6sHjbj4yxmz';\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${ encodeURI(category) }&limit=10`\n\n    const result = await fetch(url);\n    const {data} = await result.json();\n    const gifs = data.map(image=>{\n        return {\n            id:image.id,\n            title:image.title,\n            url:image.images.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({title,url}) => {\r\n\r\n    return ( \r\n        <div className='grid__card animate__animated animate__fadeInDown' >\r\n            <h3>{title}</h3>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n\r\n    );\r\n}\r\n \r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    //? Metodo con custom hook\r\n    const {loading,data} = useFetchGifs(category);\r\n\r\n    //? Metodo con helpers\r\n   // const [images,setImages]=useState([]);\r\n    // useEffect(()=>{\r\n    //     const resp = getGifs(category);\r\n    //     resp.then(data=>setImages(data))\r\n    // },[category]);\r\n\r\n    return ( \r\n        <div>\r\n            <h3>{category}</h3>\r\n            {loading \r\n                ? <p>Loading</p> \r\n                : <ul className='grid' >\r\n                    {data.map(image=>(\r\n                        <GifGridItem key={image.id} {...image} />\r\n                    ))}\r\n                </ul>\r\n            }  \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default GifGrid;","import { useState,useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category)=>{\n\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(() => {\n        \n        const resp = getGifs(category);\n        resp.then( data=>{\n            setstate({\n                data,\n                loading:false\n            })\n        } )\n\n\n    }, [category])\n\n    return state\n}","import React,{Fragment, useState} from 'react';\r\nimport AddCategory from '../components/AddCategory';\r\nimport GifGrid from '../components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories,setCategories]=useState(['One Piece'])\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} categories={categories} />\r\n            <hr />\r\n\r\n            <ul>\r\n                {categories.map((category,index)=>(\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ul>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './pages/GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}